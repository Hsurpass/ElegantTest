cmake_minimum_required (VERSION 2.8)

MESSAGE(STATUS "cmake BINARY dir: " ${CMAKE_BINARY_DIR})
MESSAGE(STATUS "hello BINARY dir: " ${Hello_BINARY_DIR})
MESSAGE(STATUS "project binary dir: " ${PROJECT_BINARY_DIR})
MESSAGE(STATUS "cmake source dir: " ${CMAKE_SOURCE_DIR})
MESSAGE(STATUS "hello source dir: " ${Hello_SOURCE_DIR})
MESSAGE(STATUS "project source dir: " ${PROJECT_SOURCE_DIR})

MESSAGE(STATUS "--------------------------------------")

MESSAGE(STATUS "cmake BINARY dir: " ${CMAKE_BINARY_DIR})
MESSAGE(STATUS "hello BINARY dir: " ${Hello_BINARY_DIR})
MESSAGE(STATUS "project binary dir: " ${PROJECT_BINARY_DIR})
MESSAGE(STATUS "cmake source dir: " ${CMAKE_SOURCE_DIR})
MESSAGE(STATUS "hello source dir: " ${Hello_SOURCE_DIR})
MESSAGE(STATUS "project source dir: " ${PROJECT_SOURCE_DIR})
MESSAGE(STATUS "CMAKE_INSTALL_PREFIX: " ${CMAKE_INSTALL_PREFIX})

MESSAGE(STATUS "CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR})
MESSAGE(STATUS "CMAKE_CURRENT_BINARY_DIR: " ${CMAKE_CURRENT_BINARY_DIR})

MESSAGE(STATUS "CMAKE_COMPILER_IS_GNUCXX: " ${CMAKE_COMPILER_IS_GNUCXX})
MESSAGE(STATUS "CMAKE_COMPILER_IS_GNUCC: " ${CMAKE_COMPILER_IS_GNUCC})
MESSAGE(STATUS "CMAKE_COMPILER_IS_GNUG77: " ${CMAKE_COMPILER_IS_GNUG77})

MESSAGE(STATUS "CMAKE_C_FLAGS: " ${CMAKE_CXX_STANDARD})
MESSAGE(STATUS "CMAKE_C_COMPILER: " ${CMAKE_C_COMPILER})
MESSAGE(STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_COMPILER})

MESSAGE(STATUS "CMAKE_C_FLAGS: " ${CMAKE_C_FLAGS})
MESSAGE(STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS})

MESSAGE(STATUS "EXECUTABLE_OUTPUT_PATH: " ${EXECUTABLE_OUTPUT_PATH})
MESSAGE(STATUS "LIBRARY_OUTPUT_PATH: " ${LIBRARY_OUTPUT_PATH})
MESSAGE(STATUS "CMAKE_MODULE_PATH:" ${CMAKE_MODULE_PATH})

MESSAGE(STATUS "CMAKE_SYSTEM_APPBUNDLE_PATH: " ${CMAKE_SYSTEM_APPBUNDLE_PATH})
MESSAGE(STATUS "CMAKE_SYSTEM_FRAMEWORK_PATH: " ${CMAKE_SYSTEM_FRAMEWORK_PATH})
MESSAGE(STATUS "CMAKE_SYSTEM_IGNORE_PATH: " ${CMAKE_SYSTEM_IGNORE_PATH})
MESSAGE(STATUS "CMAKE_SYSTEM_INCLUDE_PATH: " ${CMAKE_SYSTEM_INCLUDE_PATH})
MESSAGE(STATUS "CMAKE_SYSTEM_LIBRARY_PATH: " ${CMAKE_SYSTEM_LIBRARY_PATH})
MESSAGE(STATUS "CMAKE_SYSTEM_NAME: " ${CMAKE_SYSTEM_NAME})
MESSAGE(STATUS "CMAKE_SYSTEM_PREFIX_PATH: " ${CMAKE_SYSTEM_PREFIX_PATH})
MESSAGE(STATUS "CMAKE_SYSTEM_PROCESSOR: " ${CMAKE_SYSTEM_PROCESSOR})
MESSAGE(STATUS "CMAKE_SYSTEM_PROGRAM_PATH: " ${CMAKE_SYSTEM_PROGRAM_PATH})
MESSAGE(STATUS "CMAKE_SYSTEM_VERSION: " ${CMAKE_SYSTEM_VERSION})

MESSAGE(STATUS "CMAKE_BUILD_TYPE: " ${CMAKE_BUILD_TYPE})
MESSAGE(STATUS "CMAKE_BUILD_TYPE:  ${CMAKE_BUILD_TYPE}")

IF(CMAKE_COMPILER_IS_GNUCXX)

ENDIF(CMAKE_COMPILER_IS_GNUCXX)


AUX_SOURCE_DIRECTORY(. SRCLIST)
FOREACH(F ${SRCLIST})
    MESSAGE(STATUS ${F})
ENDFOREACH()

FOREACH(VAR RANGE 10)
    # MESSAGE(STATUS ${VAR})
ENDFOREACH()

FOREACH(VAR RANGE 5 15 3)
    MESSAGE(STATUS ${VAR})
ENDFOREACH()

MESSAGE(STATUS "PATH: $ENV{PATH}")
MESSAGE(STATUS "PATH: " $ENV{PATH})
MESSAGE(STATUS "USER: " $ENV{USER})

MESSAGE(STATUS "CMAKE_GENERATOR: " ${CMAKE_GENERATOR})

MESSAGE(STATUS "CMAKE_LIBRARY_OUTPUT_DIRECTORY: " ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
MESSAGE(STATUS "CMAKE_ARCHIVE_OUTPUT_DIRECTORY: " ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
MESSAGE(STATUS "CMAKE_RUNTIME_OUTPUT_DIRECTORY: " ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

MESSAGE(STATUS "WIN32: " ${WIN32})
MESSAGE(STATUS "WIN64: " ${WIN64})
MESSAGE(STATUS "LINUX: " ${LINUX})

IF(WIN32)
    MESSAGE("WIN32")
ELSEIF(CMAKE_GENERATOR STREQUAL "Unix Makefiles")
    MESSAGE("LINUX")
ENDIF()

function(print x y z)
    message(STATUS "CALL print func:")
    message("x = ${x}")
    message("y = " ${y})
    message("z = " ${z})
    message("argc: ${ARGC},  argv0: ${ARGV0}, argv1: ${ARGV1}, argv2: ${ARGV2}, all: ${ARGV}")
    message("argc: ,argv0: ,argv1: , argv2: , all: " ${ARGC}, ${ARGV0}, ${ARGV1}, ${ARGV2}, ${ARGV})
endfunction(print x y z)

print(1 2 3)

EXECUTE_PROCESS(COMMAND ls OUTPUT_VARIABLE ls_output RESULT_VARIABLE return_output)
message(STATUS "ls_output: " ${ls_output})
message(STATUS "return_output: " ${return_output})

set(list1 1 2 3 4)
set(list2 5;6;7;8)
set(list3 "9;10;11;12")
message(${list1})
message(${list2})
message(${list3})
message("${list1}")
message("${list2}")
message("${list3}")

list(LENGTH list1 length)
message("length: ${length}")
list(GET list1 2 var)
message("var: " ${var})
MESSAGE("---------------------------")
list(APPEND list1 5)
list(LENGTH list1 length)
message("length: ${length}")
list(GET list1 2 var)
message("var: " ${var})

LIST(REVERSE list1)
message(${list1})
LIST(SORT list1)
message(${list1})

